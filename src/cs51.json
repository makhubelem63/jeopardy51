{
    "game": {
        "single": [
            {
                "category": "Type Inference",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "<span class='code'>2 + 8</span>",
                        "solution": "What is <span class='code'>int</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<span class='code'>fun x -> x +. x</span>",
                        "solution": "What is <span class='code'>float -> float</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "<span class='code'>fun x y -> x :: y</span>",
                        "solution": "What is <span class='code'>'a -> 'a list -> 'a list</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<span class='code'>(fun x y -> x + y) 28</span>",
                        "solution": "What is <span class='code'>int -> int</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "<span class='code'>List.map</span>",
                        "solution": "What is <span class='code'>('a -> 'b) -> 'a list -> 'b list</span>?"
                    }
                ]
            },
            {
                "category": "Compute the Value",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let f x = x * 2 in</li><li>f 3 ;;</li></ul>",
                        "solution": "What is <span class='code'>6</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let x = (1.0, 0.2) in</li><li>let y, z = x in</li><li>(-.) y z ;;</li></ul>",
                        "solution": "What is <span class='code'>0.8</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "<span class='code'>(fun x y z -> z y x) 2 5 (-) ;;</span>",
                        "solution": "What is <span class='code'>3</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let lst = [5; 10; 15] in</li><li>List.fold_left (+) 0 lst ;;</li></ul>",
                        "solution": "What is <span class='code'>30</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>[1;2;3;4;5]</li><li>|> List.map (( * ) 2)</li><li>|> List.filter (fun x -> x > 5)</li><li>|> List.length</li></ul>",
                        "solution": "What is <span class='code'>3</span>?"
                    }
                ]
            },
            {
                "category": "Composite Types",
                "clues": [
                    {
                        "value": 200,
                        "clue": "A value of this type can be nil, or the cons of an element and another type.",
                        "solution": "What is list?"
                    },
                    {
                        "value": 400,
                        "clue": "There are two general approaches to handling anomalous conditions in OCaml: using exceptions, and using these.",
                        "solution": "What are option types?"
                    },
                    {
                        "value": 600,
                        "clue": "This type represents the ordered conjunction of two or more components.",
                        "solution": "What are tuples?"
                    },
                    {
                        "value": 800,
                        "clue": "To encapsulate values for one or more named fields, OCaml offers this type.",
                        "solution": "What are records?"
                    },
                    {
                        "value": 1000,
                        "clue": "This type is an algebraic data type representing a disjunction of possible value constructors.",
                        "solution": "What are variant types?"
                    }
                ]
            },
            {
                "category": "Write the Function",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "Write a function that takes an integer, and returns its square.",
                        "solution": "What is <span class='code'>let f x = x * x</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "Write a function that takes two integers, and returns the larger of the two.",
                        "solution": "What is <span class='code'>let f = max</span>?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "Write a function that takes a list, and returns a new list with each element incremented by one.",
                        "solution": "What is <span class='code'>let f = List.map ((+) 1)</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "Write a function that takes a list of integers, and returns the sum of the positive ones.",
                        "solution": "What is <ul class='code-lines'><li>let f lst = List.fold_left (+) 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;(List.filter (fun x -> x > 0) lst)</li></ul>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "Write a function that takes an integer, and computes its factorial.",
                        "solution": "What is <ul class='code-lines'><li>let rec f x =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;if x <= 1 then 1</li><li>&nbsp;&nbsp;&nbsp;&nbsp;else x * f (x - 1)</li></ul>?"
                    }
                ]
            },
            {
                "category": "Vocabulary",
                "clues": [
                    {
                        "value": 200,
                        "clue": "This is the systematic evaluation of code on known inputs, comparing the behavior to the expected.",
                        "solution": "What is unit testing?"
                    },
                    {
                        "value": 400,
                        "clue": "This word, which means \"many forms\", can refer to a function that operates on multiple types.",
                        "solution": "What is polymorphic?",
                        "dailyDouble": true
                    },
                    {
                        "value": 600,
                        "clue": "A function that takes its arguments one at a time, returning a function after each argument before the last, is this kind of function.",
                        "solution": "What is curried?"
                    },
                    {
                        "value": 800,
                        "clue": "Functions that take functions as arguments or return functions as values are these kinds of functions.",
                        "solution": "What are higher-order functions?"
                    },
                    {
                        "value": 1000,
                        "clue": "A language where the type of an expression can be determined just by examining the expression in context is this type of language.",
                        "solution": "What is statically typed?"
                    }
                ]
            },
            {
                "category": "Find the Bug",
                "clues": [
                    {
                        "value": 200,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let sum (x : float) (y : float) =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;x + y</li></ul>",
                        "solution": "What is <span class='code'>+</span> should be <span class='code'>+.</span>?"
                    },
                    {
                        "value": 400,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let double (x : int) =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;fun x -> x * 2</li></ul>",
                        "solution": "What is a duplicate argument?"
                    },
                    {
                        "value": 600,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let sum lst =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match lst with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> 0</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> 1 + (sum tl)</li></ul>",
                        "solution": "What is missing <span class='code'>rec</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "<ul class='code-lines'><li>let map f xs =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match xs with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| [] -> []</li><li>&nbsp;&nbsp;&nbsp;&nbsp;| hd :: tl -> hd :: (map f tl)</li></ul>",
                        "solution": "What is needing to apply <span class='code'>f</span> to <span class='code'>hd</span>?"
                    },
                    {
                        "value": 1000,
                        "html": true,
                        "clue": "<span class='code'>let odds = List.filter (fun x -> x mod 2)</span>",
                        "solution": "What is needing to compare the result of <span class='code'>mod</span> to an int?"
                    }
                ]
            }
        ],
        "double": [
            {
                "category": "Mutability",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "The value of <ul class='code-lines'><li>let x = ref 0 in</li><li>let y = ref 0 in</li><li>if x = y then 2 else 8</li></ul>",
                        "solution": "What is <span class='code'>2</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "The value of <ul class='code-lines'><li>let x = ref 1 in</li><li>let y = ref x in</li><li>x := !y + 5; !y</li></ul>",
                        "solution": "What is <span class='code'>6</span>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "This type of the <span class='code'>!</span> operator.",
                        "solution": "What is <span class='code'>'a ref -> 'a</span>?"
                    },
                    {
                        "value": 1600,
                        "dailyDouble": true,
                        "html": true,
                        "clue": "The value of <ul class='code-lines'><li>let x = ref 10 in</li><li>let y = x := !x + 1 in</li><li>let z x = x := !x + 1 in</li><li>!x</li></ul>",
                        "solution": "What is <span class='code'>11</span>?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "This type of the <span class='code'>:=</span> operator.",
                        "solution": "What is <span class='code'>'a ref -> 'a -> unit</span>?"
                    }
                ]
            },
            {
                "category": "Streams",
                "clues": [
                    {
                        "value": 400,
                        "clue": "TO DELAY COMPUTATION OF AN EXPRESSION UNTIL IT'S NEEDED, THIS CORE DATA TYPE CAN BE USED.",
                        "solution": "What is a function?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "THE PROBLEM WITH THIS DEFINITION OF SMAP. <ul class='code-lines'><li>let rec smap f s =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;Cons (f (head s), smap f (tail s))</li></ul>",
                        "solution": "What is needing to wrap streams in a function to delay computation?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "This type of <span class='code'>Lazy.force</span>.",
                        "solution": "What is <span class='code'>'a Lazy.t -> 'a</span>?"
                    },
                    {
                        "value": 1600,
                        "clue": "A THUNK OFFERS THIS BENEFIT OVER A PURELY FUNCTIONAL IMPLEMENTATION OF LAZINESS.",
                        "solution": "What is memoization?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "The type of the expression <ul class='code-lines'><li>let f x = lazy (x * 2) in</li><li>let y = lazy (f 14) in</li><li>y ;;</li></ul>",
                        "solution": "What is <span class='code'>int lazy_t lazy_t</span>?"
                    }
                ]
            },
            {
                "category": "Modules and Objects",
                "clues": [
                    {
                        "value": 400,
                        "clue": "THE ONLY OPERATIONS THAT A MODULE USER CAN USE ARE DEFINED IN THIS PART OF A MODULE.",
                        "solution": "What is the signature?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "Fill in the blank.<ul class='code-lines'><li>module IntQueue =</li><li>&nbsp;&nbsp;struct</li><li>&nbsp;&nbsp;&nbsp;&nbsp;type int_queue = int list</li><li>&nbsp;&nbsp;&nbsp;&nbsp;let empty_queue = []</li><li>&nbsp;&nbsp;&nbsp;&nbsp;let enqueue elt q = __________</li><li>&nbsp;&nbsp;&nbsp;&nbsp;let dequeue q = List.hd q, List.tl q</li><li>&nbsp;&nbsp;end</li></ul>",
                        "solution": "What is <span class='code'>q @ [elt]</span>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "The reason why the below is wrong.<ul class='code-lines'><li>open IntQueue ;;</li><li>let q = empty_queue</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |> enqueue 1</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |> enqueue 2</li><li>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |> List.rev ;;</li><li>let next, q = dequeue q ;;</li></ul>",
                        "solution": "What is breaking the abstraction barrier?"
                    },
                    {
                        "value": 1600,
                        "clue": "THE FOLLOWING, ORDERED BY LIKELY INHERITANCE HIERARCHY FROM SUPERCLASS TO SUBCLASS: RECTANGLE, SQUARE, SHAPE",
                        "solution": "What is SHAPE, RECTANGLE, SQUARE?"
                    },
                    {
                        "value": 2000,
                        "clue": "IF ANYTHING THAT CAN BE DONE WITH CLASS TYPE X CAN ALSO BE DONE WITH CLASS TYPE Y, THEN CLASS TYPE X IS THIS OF CLASS TYPE Y.",
                        "solution": "What is a supertype?"
                    }
                ]
            },
            {
                "category": "Semantics",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "The result of the substitution <div class='code'>(fun x -> x + y)[y -> 10]</div>",
                        "solution": "What is <span class='code'>fun x -> x + 10</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "The lexical evaluation of <ul class='code-lines'><li>let x = 8 in</li><li>let g () = x + 2 in</li><li>let x = 1 in</li><li>g () ;;</li></ul>",
                        "solution": "What is <span class='code'>10</span>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "The dynamic evaluation of <ul class='code-lines'><li>let x = 8 in</li><li>let f x = x + 2 in</li><li>let x = 12 in</li><li>f 10 ;;</li></ul>",
                        "solution": "What is <span class='code'>12</span>?"
                    },
                    {
                        "value": 1600,
                        "html": true,
                        "clue": "The bug in the substitution rule <ul class='code-lines'><li>(let x = Q in R)[x -> P] =</li><li>let x = Q[x -> P] in R[x -> P]</li></ul>",
                        "solution": "What is substituting in <span class='code'>R</span>?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "The bug in the environment semantics rule <ul class='code-lines'><li>E ⊢ let x = D in B</li><li>&nbsp;&nbsp;| E{x ↦ D} ⊢ B ⇓ v_B</li><li>&nbsp;&nbsp;| ⇓ v_B</li><ul>",
                        "solution": "What is needing to evaluate <span class='code'>D</span> first?"
                    }
                ]
            },
            {
                "category": "Edicts",
                "clues": [
                    {
                        "value": 400,
                        "clue": "THE EDICT OF ABSTRACTION: NEVER WRITE THE SAME CODE ______.",
                        "solution": "What is twice?"
                    },
                    {
                        "value": 800,
                        "clue": "THE EDICT OF DECOMPOSITION (CARVE SOFTWARE AT ITS JOINTS) IS BEST DEMONSTRATED BY THIS STYLE OF PROGRAMMING: IMPERATIVE, OBJECT-ORIENTED, LAZY.",
                        "solution": "What is object-oriented?"
                    },
                    {
                        "value": 1200,
                        "clue": "MODULES SIGNATURES HELP TO FOLLOW THE EDICT OF COMPARTMENTALIZATION BY ESTABLISHING ONE OF THESE (SIX SYLLABLES).",
                        "solution": "What is an abstraction barrier?"
                    },
                    {
                        "value": 1600,
                        "clue": "THE ONE THAT SHOWS EDICT OF INTENTION: WRITING A FUNCTION RECURSIVELY, MEMOIZING VALUES, USING ANONYMOUS VARIABLES",
                        "solution": "What is using anonymous variables?"
                    },
                    {
                        "value": 2000,
                        "clue": "BY THE EDICT OF PREVENTION, A LIST OF KEYS AND A LIST OF VALUES IS A POOR WAY TO REPRESENT A DICTIONARY FOR THIS REASON.",
                        "solution": "What is the ability to express illegal states?"
                    }
                ]
            },
            {
                "category": "Complexity",
                "clues": [
                    {
                        "value": 400,
                        "html": true,
                        "clue": "THE TIME COMPLEXITY OF GETTING THE LENGTH OF A LIST OF LENGTH <span class='code'>n</span>.",
                        "solution": "What is <span class='code'>O(n)</span>?"
                    },
                    {
                        "value": 800,
                        "html": true,
                        "clue": "THE TIME COMPLEXITY OF the following function <div class='code'>fun lst -> List.fold_left (+) 0 lst</div>",
                        "solution": "What is <span class='code'>O(n)</span>?"
                    },
                    {
                        "value": 1200,
                        "html": true,
                        "clue": "THE TIME COMPLEXITY OF USING BINARY SEARCH TO FIND AN ELEMENT IN A TREE.",
                        "solution": "What is <span class='code'>O(log n)</span>?",
                        "dailyDouble": true
                    },
                    {
                        "value": 1600,
                        "clue": "THE REASON WHY ADDING TO THE START OF A LIST IS FASTER THAN ADDING TO THE END.",
                        "solution": "What is adding to start requires just a cons, while adding to end requires traversal?"
                    },
                    {
                        "value": 2000,
                        "html": true,
                        "clue": "The time complexity of the function <ul class='code-lines'><li>let rec rev xs =</li><li>&nbsp;&nbsp;&nbsp;&nbsp;match xs with</li><li>&nbsp;&nbsp;&nbsp;&nbsp;[] -> []</li><li>&nbsp;&nbsp;&nbsp;&nbsp;hd :: tl -> (rev tl) @ [hd]</li></ul>",
                        "solution": "What is <span class='code'>O(n<sup>2</sup>)</span>"
                    }
                ]
            }
        ],
        "final": {
            "category": "Polymorphism",
            "html": true,
            "clue": "A FUNCTION, <span class='code'>curry</span>, THAT TAKES AN UNCURRIED FUNCTION OF TYPE <span class='code'>('a * 'b) -> 'c</span>, AND RETURNS A CURRIED VERSION OF THE FUNCTION.",
            "solution": "What is <div class='code'>let curry f x y = f (x, y)</div>?"
        }
    }
}
